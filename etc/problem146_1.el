
;; Just throwing a tool with a powerful built-in primality checker at
;; it. Not fast enough, no surprise there.

(require 'calc-ext)

(defun is-valid (n)
  (and (math-prime-test (+ (* n n) 1) 2)
       (not (math-prime-test (+ (* n n) 2) 2))
       (math-prime-test (+ (* n n) 3) 2)
       (not (math-prime-test (+ (* n n) 4) 2))
       (not (math-prime-test (+ (* n n) 5) 2))
       (not (math-prime-test (+ (* n n) 6) 2))
       (math-prime-test (+ (* n n) 7) 2)
       (not (math-prime-test (+ (* n n) 8) 2))
       (math-prime-test (+ (* n n) 9) 2)
       (not (math-prime-test (+ (* n n) 10) 2))
       (not (math-prime-test (+ (* n n) 11) 2))
       (not (math-prime-test (+ (* n n) 12) 2))
       (math-prime-test (+ (* n n) 13) 2)
       (not (math-prime-test (+ (* n n) 14) 2))
       (not (math-prime-test (+ (* n n) 15) 2))
       (not (math-prime-test (+ (* n n) 16) 2))
       (not (math-prime-test (+ (* n n) 17) 2))
       (not (math-prime-test (+ (* n n) 18) 2))
       (not (math-prime-test (+ (* n n) 19) 2))
       (not (math-prime-test (+ (* n n) 20) 2))
       (not (math-prime-test (+ (* n n) 21) 2))
       (not (math-prime-test (+ (* n n) 22) 2))
       (not (math-prime-test (+ (* n n) 23) 2))
       (not (math-prime-test (+ (* n n) 24) 2))
       (not (math-prime-test (+ (* n n) 25) 2))
       (not (math-prime-test (+ (* n n) 26) 2))
       (math-prime-test (+ (* n n) 27) 2)))

(let ((total 0))
  (do ((n 1 (1+ n))) ((>= n 1000000))
    (when (is-valid n)
      (setq total (+ n total))))
  (message "%d" total))
