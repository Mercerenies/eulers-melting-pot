
;; Not viable for Euler 78 :( because it's just too slow. But this
;; could be useful later on if we encounter one a bit less intensive.

(defun instr-to-emoji (instr)
  (ecase (first instr)
    (string (format nil "💬~A💬" (second instr)))
    (lambda (format nil "⛽~{~A~}🚘" (mapcar #'instr-to-emoji (rest instr))))
    (print "➡")
    (true "🚲")
    (false "🚳")
    (not "🚴")
    (add "👫")
    (mul "👪")
    (sub "🌊")
    (div "🍴")
    (mod "💸")
    (round "💿")
    (floor "📥")
    (ceil "📤")
    (number->hex "🐂")
    (string->number "🔢")
    (equal "👬")
    (less "🐣")
    (greater "🐔")
    (if (format nil "🔚~{~A~}🐧" (mapcar #'instr-to-emoji (second instr))))
    (if-else (format nil "🔚~{~A~}🐧🔙~{~A~}🐧" (mapcar #'instr-to-emoji (second instr))
                                             (mapcar #'instr-to-emoji (third instr))))
    (while "🔃")
    (dup "👥")
    (char->code "🔣")
    (code->char "🔍")
    (store "📲")
    (retrieve "📱")
    (length "📃")
    (substr "✂")
    (eval "🏃")
    (new-array "📚")
    (array-append "📌")
    (array-get "🔑")
    (swap "🔀")
    (to-upper "🔊")
    (to-lower "🔉")))

(defun translate (code)
  (apply #'concatenate 'string (mapcar #'instr-to-emoji code)))

(defun int (n)
  `((string ,(format nil "~A" n))
    (string->number)))

(defun get-var (name)
  `((string ,(format nil "~A" name))
    (retrieve)))

(defun set-var (name)
  `((string ,(format nil "~A" name))
    (store)))

(defun drop ()
  '((string "DROP")
    (store)))

(format t "~A~%"
        (translate `(,@(int 3)
                     ,@(set-var 3)
                     ,@(int 1)
                     ,@(set-var 1)
                     ,@(int 2)
                     ,@(set-var 2)
                     ,@(int 0)
                     ,@(set-var 0)
                     ,@(int -1)
                     ,@(set-var -1)
                     ,@(int 1000000)
                     ,@(set-var 1000000)
                     ,@(int 1000)
                     ,@(set-var 1000)
                     (lambda
                       (dup)
                       ,@(get-var 3)
                       (mul)
                       ,@(get-var 1)
                       (sub)
                       (mul)
                       ,@(get-var 2)
                       (div))
                     ,@(set-var 'pentagonal)
                     (lambda
                       (dup)
                       ,@(get-var 0)
                       (less)
                       (if-else
                        (,@(drop)
                         ,@(get-var 0))
                        ((dup)
                         ,@(get-var 0)
                         (equal)
                         (if-else
                          (,@(drop)
                           ,@(get-var 1))
                          (,@(get-var 'cache)
                           (swap)
                           (array-get))))))
                     ,@(set-var 'from-cache)
                     (new-array)
                     (dup)
                     ,@(set-var 'cache)
                     ,@(get-var 1)
                     (array-append)
                     ,@(get-var 1)
                     (lambda
                       ,@(set-var 'm)
                       ,@(get-var 0)
                       ,@(set-var 'total)
                       ,@(get-var 1)
                       ,@(set-var 'k)
                       (lambda
                         ,@(get-var 'm)
                         ,@(get-var 'k)
                         ,@(get-var 'pentagonal)
                         (eval)
                         (less)
                         (not))
                       (lambda
                         ,@(get-var 'k)
                         ,@(get-var 2)
                         (mod)
                         ,@(get-var 0)
                         (equal)
                         (if-else (,@(get-var -1)) (,@(get-var 1)))
                         ,@(get-var 'm)
                         ,@(get-var 'k)
                         ,@(get-var 'pentagonal)
                         (eval)
                         (sub)
                         ,@(get-var 'from-cache)
                         (eval)
                         ,@(get-var 'm)
                         ,@(get-var 'k)
                         ,@(get-var -1)
                         (mul)
                         ,@(get-var 'pentagonal)
                         (eval)
                         (sub)
                         ,@(get-var 'from-cache)
                         (eval)
                         (add)
                         (mul)
                         ,@(get-var 'total)
                         (add)
                         ,@(get-var 1000000)
                         (mod)
                         ,@(get-var 1000000)
                         (add)
                         ,@(get-var 1000000)
                         (mod)
                         ,@(set-var 'total)
                         ,@(get-var 'k)
                         ,@(get-var 1)
                         (add)
                         ,@(set-var 'k))
                       (while)
                       ,@(get-var 'cache)
                       ,@(get-var 'total)
                       (array-append)
                       ,@(get-var 'total)
                       ,@(get-var 1000000)
                       (mod)
                       ,@(get-var 0)
                       (equal)
                       (not)
                       ,@(get-var 'm)
                       ;;
                       (dup) (dup) ,@(int 100) (mod) ,@(get-var 0) (equal) (if-else ((print)) (,@(drop)))
                       ;(dup) (print)
                       ;;
                       (swap))
                     (lambda
                       ,@(get-var 1)
                       (add))
                     (while)
                     (print))))
