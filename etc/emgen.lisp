
;; Not viable for Euler 78 :( because it's just too slow. But this
;; could be useful later on if we encounter one a bit less intensive.

;; Also not viable for 120, for similar reasons :(

;; Finally got it on 121 :D

(defun instr-to-emoji (instr)
  (ecase (first instr)
    (string (format nil "💬~A💬" (second instr)))
    (lambda (format nil "⛽~{~A~}🚘" (mapcar #'instr-to-emoji (rest instr))))
    (print "➡")
    (true "🚲")
    (false "🚳")
    (not "🚴")
    (add "👫")
    (mul "👪")
    (sub "🌊")
    (div "🍴")
    (mod "💸")
    (round "💿")
    (floor "📥")
    (ceil "📤")
    (number->hex "🐂")
    (string->number "🔢")
    (equal "👬")
    (less "🐣")
    (greater "🐔")
    (if (format nil "🔚~{~A~}🐧" (mapcar #'instr-to-emoji (second instr))))
    (if-else (format nil "🔚~{~A~}🐧🔙~{~A~}🐧" (mapcar #'instr-to-emoji (second instr))
                                             (mapcar #'instr-to-emoji (third instr))))
    (while "🔃")
    (dup "👥")
    (char->code "🔣")
    (code->char "🔍")
    (store "📲")
    (retrieve "📱")
    (length "📃")
    (substr "✂")
    (eval "🏃")
    (new-array "📚")
    (array-append "📌")
    (array-get "🔑")
    (swap "🔀")
    (to-upper "🔊")
    (to-lower "🔉")))

(defun translate (code)
  (apply #'concatenate 'string (mapcar #'instr-to-emoji code)))

(defun int (n)
  `((string ,(format nil "~A" n))
    (string->number)))

(defun get-var (name)
  `((string ,(format nil "~A" name))
    (retrieve)))

(defun set-var (name)
  `((string ,(format nil "~A" name))
    (store)))

(defun drop ()
  '((string "DROP")
    (store)))

(format t "~A~%"
        (translate `((lambda
                       ,@(set-var 'n)
                       ,@(set-var 'x)
                       ,@(get-var 'n)
                       ,@(int 1)
                       (less)
                       (if-else
                        (,@(int 1))
                        (,@(get-var 'x)
                         ,@(int 0)
                         (equal)
                         (if-else
                          (,@(int 0))
                          (,@(get-var 'x)
                           ,@(int 1)
                           (sub)
                           (dup)
                           ,@(get-var 'n)
                           (swap)
                           ,@(get-var 'n)
                           ,@(int 1)
                           (sub)
                           ,@(get-var 'b)
                           (eval)
                           ,@(set-var 'p)
                           ,@(set-var 'q)
                           ,@(set-var 'r)
                           ,@(get-var 'r)
                           ,@(get-var 'p)
                           ,@(get-var 'r)
                           ,@(get-var 'q)
                           ,@(get-var 'b)
                           (eval)
                           ,@(set-var 'p)
                           ,@(set-var 'q)
                           ,@(int 2)
                           (add)
                           ,@(int 1)
                           (swap)
                           (div)
                           (dup)
                           ,@(get-var 'q)
                           (mul)
                           (swap)
                           ,@(int 1)
                           (swap)
                           (sub)
                           ,@(get-var 'p)
                           (mul)
                           (add))))))
                     ,@(set-var 'b)
                     ,@(int 15)
                     ,@(int 8)
                     ,@(get-var 'b)
                     (eval)
                     ,@(int 1)
                     (swap)
                     (div)
                     (floor)
                     (print))))

;; (format t "~A~%"
;;         (translate `((lambda
;;                        (swap)
;;                        (dup)
;;                        ,@(int 0)
;;                        (equal)
;;                        (if-else
;;                         (,@(drop)
;;                          ,@(drop)
;;                          ,@(drop)
;;                          ,@(int 1))
;;                         (,@(set-var 7)
;;                          ,@(set-var 8)
;;                          (dup)
;;                          ,@(get-var 8)
;;                          (swap)
;;                          ,@(get-var 7)
;;                          ,@(int 1)
;;                          (sub)
;;                          ,@(get-var 8)
;;                          ,@(get-var 6)
;;                          (eval)
;;                          (swap)
;;                          ,@(set-var 7)
;;                          (mul)
;;                          ,@(get-var 7)
;;                          (mod))))
;;                      ,@(set-var 6)
;;                      (lambda
;;                        ,@(set-var 9)
;;                        ,@(set-var 10)
;;                        ,@(get-var 10)
;;                        ,@(int 1)
;;                        (sub)
;;                        ,@(get-var 9)
;;                        ,@(get-var 10)
;;                        (dup)
;;                        (mul)
;;                        ,@(get-var 6)
;;                        (eval)
;;                        ,@(get-var 10)
;;                        ,@(int 1)
;;                        (add)
;;                        ,@(get-var 9)
;;                        ,@(get-var 10)
;;                        (dup)
;;                        (mul)
;;                        ,@(get-var 6)
;;                        (eval))
;;                      ,@(set-var 14)
;;                      (lambda
;;                        ,@(int 0)
;;                        ,@(set-var 16)
;;                        ,@(set-var 7)
;;                        ,@(set-var 8)
;;                        (false)
;;                        (lambda
;;                          ,@(get-var 16)
;;                          ,@(get-var 7)
;;                          (length)
;;                          (less))
;;                        (lambda
;;                          ,@(get-var 7)
;;                          ,@(get-var 16)
;;                          (array-get)
;;                          ,@(get-var 8)
;;                          (equal)
;;                          (if
;;                           (,@(drop)
;;                            (true)))
;;                          ,@(get-var 16)
;;                          ,@(int 1)
;;                          (add)
;;                          ,@(set-var 16))
;;                        (while))
;;                      ,@(set-var 15)
;;                      (lambda
;;                        ,@(set-var 7)
;;                        ,@(set-var 8)
;;                        ,@(get-var 8)
;;                        ,@(get-var 7)
;;                        (greater)
;;                        (if-else
;;                         (,@(get-var 8))
;;                         (,@(get-var 7))))
;;                      ,@(set-var 18)
;;                      (lambda
;;                        ,@(set-var 2)
;;                        (new-array)
;;                        ,@(set-var 3)
;;                        ,@(int 0)
;;                        ,@(set-var 4)
;;                        ,@(int 1)
;;                        ,@(set-var 5)
;;                        (lambda
;;                          ,@(get-var 2)
;;                          ,@(get-var 5)
;;                          ,@(get-var 14)
;;                          (eval)
;;                          ,@(get-var 2)
;;                          (dup)
;;                          (mul)
;;                          (mul)
;;                          (add)
;;                          (dup)
;;                          ,@(set-var 11)
;;                          ,@(get-var 3)
;;                          ,@(get-var 15)
;;                          (eval)
;;                          (not))
;;                        (lambda
;;                          ,@(get-var 3)
;;                          ,@(get-var 11)
;;                          (array-append)
;;                          ,@(get-var 2)
;;                          ,@(get-var 5)
;;                          ,@(get-var 14)
;;                          (eval)
;;                          (add)
;;                          ,@(get-var 2)
;;                          (dup)
;;                          (mul)
;;                          (mod)
;;                          ,@(get-var 4)
;;                          ,@(get-var 18)
;;                          (eval)
;;                          ,@(set-var 4)
;;                          ,@(get-var 5)
;;                          ,@(int 1)
;;                          (add)
;;                          ,@(set-var 5))
;;                        (while)
;;                        ,@(get-var 4))
;;                      ,@(set-var 17)
;;                      ,@(int 0)
;;                      ,@(set-var 1)
;;                      ,@(int 3)
;;                      ,@(set-var 12)
;;                      (lambda
;;                        ,@(get-var 12)
;;                        ,@(int 1001)
;;                        (less))
;;                      (lambda
;;                        ,@(get-var 1)
;;                        ,@(get-var 12)
;;                        ,@(get-var 17)
;;                        (eval)
;;                        (add)
;;                        ,@(set-var 1)
;;                        ,@(get-var 12)
;;                        ,@(int 1)
;;                        (add)
;;                        (dup) (print)
;;                        ,@(set-var 12))
;;                      (while)
;;                      ,@(get-var 1)
;;                      (print))))

;; (format t "~A~%"
;;         (translate `(,@(int 3)
;;                      ,@(set-var 3)
;;                      ,@(int 1)
;;                      ,@(set-var 1)
;;                      ,@(int 2)
;;                      ,@(set-var 2)
;;                      ,@(int 0)
;;                      ,@(set-var 0)
;;                      ,@(int -1)
;;                      ,@(set-var -1)
;;                      ,@(int 1000000)
;;                      ,@(set-var 1000000)
;;                      ,@(int 1000)
;;                      ,@(set-var 1000)
;;                      (lambda
;;                        (dup)
;;                        ,@(get-var 3)
;;                        (mul)
;;                        ,@(get-var 1)
;;                        (sub)
;;                        (mul)
;;                        ,@(get-var 2)
;;                        (div))
;;                      ,@(set-var 'pentagonal)
;;                      (lambda
;;                        (dup)
;;                        ,@(get-var 0)
;;                        (less)
;;                        (if-else
;;                         (,@(drop)
;;                          ,@(get-var 0))
;;                         ((dup)
;;                          ,@(get-var 0)
;;                          (equal)
;;                          (if-else
;;                           (,@(drop)
;;                            ,@(get-var 1))
;;                           (,@(get-var 'cache)
;;                            (swap)
;;                            (array-get))))))
;;                      ,@(set-var 'from-cache)
;;                      (new-array)
;;                      (dup)
;;                      ,@(set-var 'cache)
;;                      ,@(get-var 1)
;;                      (array-append)
;;                      ,@(get-var 1)
;;                      (lambda
;;                        ,@(set-var 'm)
;;                        ,@(get-var 0)
;;                        ,@(set-var 'total)
;;                        ,@(get-var 1)
;;                        ,@(set-var 'k)
;;                        (lambda
;;                          ,@(get-var 'm)
;;                          ,@(get-var 'k)
;;                          ,@(get-var 'pentagonal)
;;                          (eval)
;;                          (less)
;;                          (not))
;;                        (lambda
;;                          ,@(get-var 'k)
;;                          ,@(get-var 2)
;;                          (mod)
;;                          ,@(get-var 0)
;;                          (equal)
;;                          (if-else (,@(get-var -1)) (,@(get-var 1)))
;;                          ,@(get-var 'm)
;;                          ,@(get-var 'k)
;;                          ,@(get-var 'pentagonal)
;;                          (eval)
;;                          (sub)
;;                          ,@(get-var 'from-cache)
;;                          (eval)
;;                          ,@(get-var 'm)
;;                          ,@(get-var 'k)
;;                          ,@(get-var -1)
;;                          (mul)
;;                          ,@(get-var 'pentagonal)
;;                          (eval)
;;                          (sub)
;;                          ,@(get-var 'from-cache)
;;                          (eval)
;;                          (add)
;;                          (mul)
;;                          ,@(get-var 'total)
;;                          (add)
;;                          ,@(get-var 1000000)
;;                          (mod)
;;                          ,@(get-var 1000000)
;;                          (add)
;;                          ,@(get-var 1000000)
;;                          (mod)
;;                          ,@(set-var 'total)
;;                          ,@(get-var 'k)
;;                          ,@(get-var 1)
;;                          (add)
;;                          ,@(set-var 'k))
;;                        (while)
;;                        ,@(get-var 'cache)
;;                        ,@(get-var 'total)
;;                        (array-append)
;;                        ,@(get-var 'total)
;;                        ,@(get-var 1000000)
;;                        (mod)
;;                        ,@(get-var 0)
;;                        (equal)
;;                        (not)
;;                        ,@(get-var 'm)
;;                        ;;
;;                        (dup) (dup) ,@(int 100) (mod) ,@(get-var 0) (equal) (if-else ((print)) (,@(drop)))
;;                        ;(dup) (print)
;;                        ;;
;;                        (swap))
;;                      (lambda
;;                        ,@(get-var 1)
;;                        (add))
;;                      (while)
;;                      (print))))
