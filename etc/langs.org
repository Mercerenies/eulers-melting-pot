
* WHAT IS THIS
  This is a listing of the languages from ~etc/langs.txt~. I've ranked
  them based on my personal abilities in each. Please do not read this
  chart as any sort of preference chart or any sort of metric for
  judging the quality of a language. This is purely based on my
  /personal/ skills and abilities in a given language and is intended
  for my use in determining what language to use next.
* LANGUAGES
** PLATINUM
   Platinum languages are languages that I personally feel very
   confident programming in. I feel I can solve any challenge in these
   languages, given the time.
*** C
*** C++
*** Coffeescript
*** GDScript
*** GML                                                                :used:
*** Haskell
*** Java
*** Javascript
*** Julia                                                              :used:
*** Kotlin
*** Lua
*** Mathematica
*** OCaml                                                              :used:
*** Perl
*** Python
*** Raku (Perl 6)
*** Ruby
*** Rust                                                               :used:
*** Scala
*** Tcl                                                                :used:
*** Typescript                                                         :used:
*** Zig                                                                :used:
** GOLD
   Gold languages are languages are languages I feel mostly confident
   programming in. With some help from online guides, I can consider
   myself fluent in these.
*** C#                                                                 :used:
*** Carbon (https://github.com/carbon-language/carbon-lang)
    + Currently unimplemented. Looks like they hope to be done in
      2023, so maybe soon.
*** Ceylon
*** D                                                                  :used:
*** Elixir                                                             :used:
*** Elm
*** Erlang                                                             :used:
*** Factor                                                             :used:
*** Fennel                                                             :used:
*** Frege (https://github.com/Frege/frege)
*** Go                                                                 :used:
*** PHP
*** Pizza                                                              :used:
** SILVER
   Silver languages are perfectly capable languages to solve any
   challenge, but I do not consider myself fluent in them. "Silver" is
   the highest rank a language can achieve by its own merits; "Gold"
   and "Platinum" are measures of my personal skill.
*** Ada                                                                :used:
*** ALGOL 68                                                           :used:
*** AssemblyScript (https://www.assemblyscript.org/)                   :used:
    + Limit is probably i32; i64 is mocked through a weird interface
      (~setTempRet0~) that probably doesn't work for us.
*** AWK                                                                :used:
*** Bizubee (https://bizubee.github.io/)
*** COBOL                                                              :used:
*** Delphi (https://en.wikipedia.org/wiki/Delphi_(software))
    + Verify that this is different enough from Pascal to warrant its
      own slot.
*** Dylan                                                              :used:
*** Earl Grey                                                          :used:
*** Eiffel                                                             :used:
*** F#
*** Forth                                                              :used:
*** Fortran                                                            :used:
*** Gleam                                                              :used:
*** Groovy (https://groovy-lang.org/)
*** Haxe (https://haxe.org/)
*** Icon                                                               :used:
*** Io                                                                 :used:
*** Ioke                                                               :used:
*** Livescript (https://livescript.net/)
*** Lunar (https://github.com/lunarlang/lunar)
*** Maple
*** MATLAB / Octave                                                    :used:
*** Modula
*** Modula-2
*** MoonScript                                                         :used:
*** Nemerle                                                            :used:
*** Nim                                                                :used:
*** Oberon-07                                                          :used:
*** Objective-C                                                        :used:
*** Pascal                                                             :used:
*** R
*** Rebol                                                              :used:
*** Red (https://www.red-lang.org/)
*** Self
*** Skip (https://skiplang.com/)
*** Smalltalk                                                          :used:
*** SML                                                                :used:
*** Squeak
*** Swift                                                              :used:
*** Verilog                                                            :used:
*** X10 (http://x10-lang.org/)                                         :used:
*** Z (https://zlanguage.github.io/)                                   :used:
*** zkl                                                                :used:
** BRONZE
   Bronze languages are mostly capable general-purpose programming
   languages which might have some inherent limitations.
   Alternatively, they're powerful tools which turned out to be Turing
   complete despite potentially not being intended in that way. A
   Bronze language has an inherent limitation, either semantically or
   from an efficiency perspective, that makes it less desirable than a
   Silver language.
*** 11l (http://rosettacode.org/wiki/Category:11l)                     :used:
    + Dictionaries / sets / advanced data structures are flaky
*** 42 (https://forty2.is/)
*** ABAP (https://en.wikipedia.org/wiki/ABAP)
*** Agda                                                               :used:
*** APL                                                                :used:
*** Attache (https://github.com/ConorOBrien-Foxx/Attache)
*** AutoHotkey                                                         :used:
    + 64-bit integers (no bignums)
    + Windows only
*** bc                                                                 :used:
*** BeanShell                                                          :used:
*** BQN (https://mlochbaum.github.io/BQN/)
*** Cat
    + No arrays
*** Container (https://github.com/odddollar/Container-lang)
    + No arrays
*** üÜí                                                                 :used:
*** Dafny                                                              :used:
*** Dhall (https://dhall-lang.org/#)                                   :used:
    + Subturing, loops must be finitely bounded
    + Loops only available via map, fold, etc.
*** Dip                                                                :used:
*** Dogescript                                                         :used:
*** Dry                                                                :used:
*** Egison (https://www.egison.org/)
*** ùîºùïäùïÑùïöùïü                                                              :used:
*** F*
*** GAP
*** Genie                                                              :used:
*** Giml (https://giml-lang.org/)
    + Division is broken, no modulo
*** Glava                                                              :used:
*** i (https://github.com/Qlova/ilang)                                 :used:
*** IMPS (https://imps.mcmaster.ca/)
*** IntercalScript                                                     :used:
    + No Bignums
*** J                                                                  :used:
*** Javagony                                                           :used:
*** Joy                                                                :used:
*** Kitten                                                             :used:
    + 64-bit integers (no bignums)
*** K
    + No bignums
*** ŒªProlog
*** LaTeX                                                              :used:
*** Lean (https://leanprover-community.github.io/)                     :used:
*** LilyPond                                                           :used:
*** Luna (http://staging.luna-lang.org/)
*** m4                                                                 :used:
*** Magpie (https://www.magpie-lang.org/)
    + Arrays are immutable
*** Make                                                               :used:
*** Mercury (https://www.mercurylang.org/)
*** Nit                                                                :used:
*** Picat                                                              :used:
*** Pike                                                               :used:
*** Pikelet
    + No IO
*** Pikt (https://web.archive.org/web/20080716033727/http://pikt.org/pikt/intro/intro.html)
*** Pikt (https://github.com/iAmGio/pikt)                              :used:
*** Pony                                                               :used:
*** Potassco                                                           :used:
*** Prolog                                                             :used:
*** PROMAL
*** Roy                                                                :used:
*** S (https://en.wikipedia.org/wiki/S_(programming_language))
*** Scratch                                                            :used:
*** sed                                                                :used:
*** SNOBOL                                                             :used:
*** Stacked (https://github.com/ConorOBrien-Foxx/stacked)
*** Streem
*** Strema (https://gilmi.gitlab.io/strema/)
    + Division is broken, no modulo
*** SuperCollider                                                      :used:
*** Vala                                                               :used:
*** Vale (https://vale.dev/)                                           :used:
*** Vimscript
*** Wenyan                                                             :used:
*** Wren                                                               :used:
*** Wyvern                                                             :used:
*** XSLT                                                               :used:
** ASSEMBLY
   Assembly dialects. This includes both Assembly languages which
   compile to the machine and those that compile to a VM such as the
   JVM.
*** CIL                                                                :used:
*** Jasmin                                                             :used:
*** LLVM IR                                                            :used:
*** Marie.js (https://marie.js.org/)
    + 16 bit registers
*** MASM                                                               :used:
*** Motorola 68000 (https://en.wikibooks.org/wiki/68000_Assembly/Registers)
    + Good simulator for it: http://www.easy68k.com/index.html
    + 32 bit registers
*** NASM                                                               :used:
*** Parrot IR                                                          :used:
*** PASM                                                               :used:
*** WASM (WAT)                                                         :used:
** SHELL
   Shell dialects, languages intended to be used in a terminal.
*** Bash
*** Batch                                                              :used:
*** Csh                                                                :used:
*** Dash
*** Fish
*** Ksh
*** Oilshell
*** Scsh
*** Zsh                                                                :used:
** BASIC
   BASIC dialects.
*** Chipmunk BASIC
*** Commodore BASIC
*** JustBASIC                                                          :used:
*** Microsoft SmallBasic
*** QBASIC                                                             :used:
*** Quite BASIC
*** TI BASIC
*** VBA                                                                :used:
*** Visual Basic .NET                                                  :used:
*** XC=BASIC
** LISP
   Lisp dialects.
*** Arc (https://en.wikipedia.org/wiki/Arc_(programming_language))     :used:
*** ArkScript (https://github.com/ArkScript-lang/Ark/)                 :used:
*** AutoLISP
*** Bel (http://www.paulgraham.com/bel.html)
    + Possible interpreter: https://github.com/ajlopez/beljs
*** Carp
*** Clojure
*** ClojureScript
*** Common Lisp
*** ELisp                                                              :used:
*** Guile
*** Hy (https://en.wikipedia.org/wiki/Hy)                              :used:
*** Kawa
*** Kernel (Klisp)
*** LFE (Lisp Flavored Erlang)
*** Maclisp
*** NewLISP
*** Racket
*** Scheme
** GAMES
   Video games which happen to be Turing complete or close enough to
   it to complete challenges.
*** 7 Billion Humans
*** Factorio                                                           :used:
*** Game Builder Garage                                                :used:
*** Oort (https://oort.rs/)
    + Too similar to Rust?
*** Super Mario Maker 2
    + Very limited in computational capability, might be unusable
*** Minecraft                                                          :used:
*** Turing Complete (https://turingcomplete.game/)
*** Buildbox (https://www.buildbox.com/buildbox-free-is-now-available/)
** ESOTERIC
   "Esoteric" is the category below "Bronze"; an Esoteric language is
   inherently special-purpose enough or limited enough that its uses
   are severely restricted.
*** *><>                                                               :used:
*** ///                                                                :used:
*** 05AB1E                                                             :used:
*** 1.1                                                                :used:
*** ><>                                                                :used:
*** AGSPL (https://esolangs.org/wiki/AGSPL)                            :used:
*** Alice (m-ender)                                                    :used:
*** Anti-Array                                                         :used:
*** Aya                                                                :used:
*** Beeswax                                                            :used:
*** Befalse                                                            :used:
*** Befreak                                                            :used:
    + No arrays
    + 32-bit integers
*** Befunge                                                            :used:
*** Befunk                                                             :used:
*** Brainf**k                                                          :used:
*** Burlesque (https://esolangs.org/wiki/Burlesque)                    :used:
*** Bussin (https://github.com/face-hh/bussin)
*** Brat                                                               :used:
*** Chef                                                               :used:
*** CJam                                                               :used:
*** Comefrom0x10 (https://esolangs.org/wiki/Comefrom0x10)              :used:
*** COMPLEX                                                            :used:
*** Cubix                                                              :used:
*** Cy (https://github.com/cyoce/Cy)
*** ed
    + Loops are recursive
    + Short list
*** Emmental (https://esolangs.org/wiki/Emmental)
*** Emoji                                                              :used:
*** Emotinomicon
    + Short list
*** Enchilada                                                          :used:
*** Enso (https://enso.org/)
*** Excel                                                              :used:
    + Answer must fit into floating-point value
*** FALSE                                                              :used:
*** FiM++                                                              :used:
*** Folders (https://esolangs.org/wiki/Folders)
*** Fourier                                                            :used:
*** FRACTRAN
    + Short list
*** Funciton                                                           :used:
*** Fuzzy Octo Guacamole (https://codereview.stackexchange.com/questions/124736/fuzzy-octo-guacamole-interpreter)
*** Gibberish                                                          :used:
*** Golfscript                                                         :used:
*** Grocery List                                                       :used:
*** Gwion                                                              :used:
*** Hanabi                                                             :used:
*** Hexagony                                                           :used:
*** Inform 7
    + Short List
*** Japt                                                               :used:
*** Javagrid (https://esolangs.org/wiki/Javagrid)
*** Jelly                                                              :used:
*** JSF**k                                                             :used:
*** Labyrinth                                                          :used:
*** LOLCODE (https://en.wikipedia.org/wiki/LOLCODE)
*** MagiStack                                                          :used:
*** Math++                                                             :used:
*** MATL                                                               :used:
*** MontiLang                                                          :used:
*** Mouse-2002                                                         :used:
*** Myby (https://github.com/ConorOBrien-Foxx/Myby/)
*** naz (https://github.com/sporeball/naz)
*** Orthagonal (https://github.com/m-ender/orthagonal)
*** Perchance                                                          :used:
*** Pickle (Python)                                                    :used:
    + Yes, the serialization framework; I think it's Turing complete
    + Loops are recursive
*** Piet                                                               :used:
*** Pip                                                                :used:
*** Puzzlescript (https://www.puzzlescript.net/)
*** Pyramid Scheme (https://github.com/ConorOBrien-Foxx/Pyramid-Scheme)
*** Pyth                                                               :used:
*** Quark (https://github.com/henrystanley/Quark/)
*** Retina (https://esolangs.org/wiki/Retina)
*** Rockstar                                                           :used:
*** Secretary (https://esolangs.org/wiki/Secretary)
*** Seriously                                                          :used:
*** Shakespeare                                                        :used:
*** Snowman                                                            :used:
*** SNUSP (https://esolangs.org/wiki/SNUSP)
*** Stuck                                                              :used:
*** Taxi                                                               :used:
*** Tome                                                               :used:
*** Tovie (https://github.com/Jaysmito101/tovie)                       :used:
*** TRANSCRIPT                                                         :used:
    + No arrays
*** Underload
    + Short list
*** V                                                                  :used:
*** Whitespace                                                         :used:
** UNUSABLE
*** ActionScript
    Flash is end-of-life and all of the other Adobe products seem to
    either be paid or not support my OS. I also can't seem to get the
    [[https://github.com/Corsaair/as3shebang][open-source version]] to run at all.
*** ALF
    The [[https://www.informatik.uni-kiel.de/~mh/systems/ALF/][available implementation]] is 25 years old and, despite my best
    efforts, I cannot get its ~a.out~ format executables to run on my
    machine.
*** Ark (https://github.com/ark-lang/ark)
    Cannot build the tooling necessary to use the official (and only)
    compiler.
*** Arn (ZippyMagician)
    Looks neat, but either the documentation is wrong or the
    implementation is hilariously buggy. I can't get anything more
    than basic arithmetic to run in the downloadable implementation.
    With no functions or loops, and no way to do any conditionals more
    advanced than ~||~ and ~&&~, I don't see this one happening.
*** ASP
    So I misunderstood. ASP is a way of embedding VBScript (which is,
    for our purposes, basically Visual Basic). And ASP.net embeds C#,
    Visual Basic, and Visual J#. The former two are already on my list
    separately, and the final one seems to basically just be Java on a
    different platform, so this is not an independent language for our
    purposes.
*** Basis
    The [[https://esolangs.org/wiki/Basis#Reference_implementation_.28WIP.29][only implementation]] is incomplete and does not have enough
    features to perform any sort of nontrivial computation.
*** chomksi (pep)
    I can find no further records of this language's existence.
*** Clasp.py
    Is this actually a language or just a library...?
*** Conedy
    See Trajedy.
*** EcstasyLang
    May be worth looking at at some point in the future. The
    instructions to get the thing running don't seem to be in working
    order. The language itself seems to have substantial work put into
    it.
*** Emoticon
    The only interpreter I could find is a Wayback Machine archive
    from ancient times which tries to run a PHP server that doesn't
    exist. The source code for this server is unavailable, to the best
    of my searching ability.
*** Enterprise
    Could not run due to language-imposed restrictions.
*** GridScript
    [[https://esolangs.org/wiki/GridScript][Unimplemented]]
*** Inca
    Unimplemented
*** INTERCAL
    No.
*** Jellyfish
    I'm calling Mandela effect here. I can find no record of this
    language existing, aside from a random Docker container floating
    around with no docs. I swear it used to have an Esolang page but
    can't find any record of it.
*** Jsish
    This is just a Javascript interpreter built for embedded systems.
    It's too similar to vanilla JS for my tastes.
*** Keg
    Cannot find this language again.
*** Leafscript
    The only interpreter segfaults when running any of the example
    programs.
*** Lunar (http://users.rcn.com/david-moon/Lunar/)
    Unimplemented
*** minaac
    The interpreter seems to be using lots of implementation-defined
    C++ behavior and, as a result, I can only use a small subset of
    the defined commands without segfaulting at random.
*** Noether (https://github.com/noether-lang/noether)
    Unimplemented
*** Orthogonal
    Sadly, the only [[http://www.muppetlabs.com/~breadbox/orth/][working interpreter]] I can find was written for a
    compiler from 25 years ago.
*** Piet++
    [[https://esolangs.org/wiki/Piet%252B%252B][Unimplemented :(]]
*** Quark (https://github.com/quark-lang/quark)
    Looks like a neat project, but the interpreter is irreparably
    broken. ~true~ and ~false~ evaluate to the same value, subtraction
    unconditionally yields NaN when called inside a function but works
    correctly at top-level, etc., etc.
*** Rio
    Can't find it again.
*** Skastic
    Looks like a /super/ cool idea, but it's woefully incomplete to
    the point of possibly not even being Turing complete.
*** spl (https://esolangs.org/wiki/Spl)
    No implementation
*** Trajedy
    Beautiful language, but... no.
*** Unlambda
    Possibly too minimal?
*** Whython (https://www.pxeger.com/2021-09-19-hacking-on-cpython/)
    Unimplemented
** UNCLASSIFIED
*** Alice
*** Alloy (https://alloytools.org/)
*** ArnoldC (https://esolangs.org/wiki/ArnoldC)
*** Ateji PX (https://en.wikipedia.org/wiki/Ateji_PX)
*** ATS
*** BaCon (http://basic-converter.org/)
*** Brachylog
*** Bracmat (https://github.com/BartJongejan/Bracmat)
*** CandleScript
*** Catln (https://catln.dev/)
*** CDuce (http://www.cduce.org/)
*** Cecil
*** Charm (https://en.wikipedia.org/wiki/Charm_(programming_language))
*** Clean
*** Coconut
*** ColdFusion
*** Cubically (https://github.com/aaronryank/cubically)
*** Crystal
*** Curl (https://www.curl.com/products/prod/language/)
*** Dale (https://github.com/tomhrr/dale)
*** Dart
*** E
*** ƒñ (https://e-dot.io/)
*** Egel (https://egel-lang.github.io/)
*** EGL
*** Euler
*** F' (https://nasa.github.io/fprime/)
*** Falcon (https://rosettacode.org/wiki/Category:Falcon)
*** Fancy
*** Fantom (https://www.fantom.org/)
*** Fission
*** Flix (https://github.com/flix/flix)
*** Flora (https://flora.sourceforge.net/)
*** G-- (https://github.com/ReyAnthony/G--)
*** Genesis (https://github.com/elonlit/Genesis)
*** Gluon
*** Hare (https://harelang.org/)
*** Husk (https://github.com/barbuz/Husk)
*** Hyperscript (https://hyperscript.org/)
*** I (https://aplwiki.com/wiki/I)
*** IMP (https://en.wikipedia.org/wiki/IMP_(programming_language))
*** Jeebox (http://jeebox.org/stuff/learn_more/)
*** jq (https://stedolan.github.io/jq/)
*** Kobalt (https://github.com/abel0b/kobalt)
*** Koi (https://koi-lang.dev/)
*** Konna (https://www.reddit.com/r/ProgrammingLanguages/comments/rpe65y/konna_my_programming_language/)
*** Lava (https://lavape.sourceforge.net/)
*** Logtalk (https://logtalk.org/)
*** Minus (http://www.golfscript.com/)
*** Monte (https://github.com/monte-language/monte)
*** Mojo (https://www.modular.com/mojo)
*** Nibbles (http://www.golfscript.com/)
*** Oasis
*** Oblivion (https://jweinst1.github.io/OblivionWebsite/)
*** Occam
*** Occam-œÄ
*** Ohm
*** Orc
*** Orion (https://github.com/wafelack/orion/)
*** Oxide (https://github.com/tuqqu/oxide-lang)
*** Oz
*** Paperscript
*** Peg (https://github.com/HackerFoo/peg)
*** Postscript
*** PPL
*** Processing (https://en.wikipedia.org/wiki/Processing_(programming_language))
*** Pyret (https://pyret.org/index.html)
*** Reason (https://reasonml.github.io/)
*** Rhombus (https://docs.racket-lang.org/rhombus/index.html)
*** Runic Enchantments (https://github.com/Draco18s/RunicEnchantments/tree/Console)
*** Simula
*** Skript (https://docs.skriptlang.org/)
*** smodels (http://www.tcs.hut.fi/Software/smodels/)
*** Snails
*** Soul (https://github.com/egel-lang/soul)
*** Squirrel
*** Story (https://github.com/soborat/story-programming-language)
*** SuperForth (https://github.com/TheRealMichaelWang/superforth)
*** Sweet.js
*** Teascript
*** TurtleArt (https://help.sugarlabs.org/en/turtleart_tutorials/programming_without_words.html)
*** Unicon
*** Unison (https://www.unison-lang.org/)
*** Universal Lambda (http://www.golfscript.com/)
*** VALE (https://github.com/project-everest/vale)
*** Verse (https://dev.epicgames.com/documentation/en-us/uefn/verse-language-reference)
*** Vortex (https://github.com/dibsonthis/Vortex)
*** Vyxal (https://github.com/Vyxal/Vyxal)
*** Whiley (https://en.wikipedia.org/wiki/Whiley_(programming_language))
*** Whispers (https://github.com/cairdcoinheringaahing/Whispers)
*** Width (https://github.com/stestoltz/Width)
*** XQuery
*** XY
*** Yuescript
    + Might be too similar to Moonscript? Investigate further.
* RESOURCES
** LISTS OF LANGUAGES
  Here are several online resources that I've found to be useful for finding various languages.

  + Esolang
    - https://esolangs.org/wiki/Main_Page
  + What programming languages have been created by PPCG users? - Code
    Golf Meta Stack Exchange
    - https://codegolf.meta.stackexchange.com/questions/6918/what-programming-languages-have-been-created-by-ppcg-users
  + Wikipedia Lists of Programming Languages
    - https://en.wikipedia.org/wiki/Lists_of_programming_languages
  + Github Linguist ~languages.yml~
    - https://github.com/github/linguist/blob/master/lib/linguist/languages.yml
  + 99-bottles-of-beer.net (Archived)
    - https://web.archive.org/web/20180222023404/http://99-bottles-of-beer.net/abc.html
  + List of languages that compile to JS
    - https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS
  + Hello world/Text - Rosetta Code
    - https://rosettacode.org/wiki/Hello_world/Text
  + Showcase of Languages - Code Golf Stack Exchange
    - https://codegolf.stackexchange.com/questions/44680/showcase-of-languages
  + Anarchy Golf
    - http://golf.shinh.org/
  + hakatashi/esolang-box: Easy and standardized docker images for 200+ esoteric (and non-esoteric) languages
    - https://github.com/hakatashi/esolang-box
  + Best languages that compile to JS
    - https://www.slant.co/topics/101/~best-languages-that-compile-to-javascript
  + What languages have been created by PLDI Users - Programming
    Language Design and Implementation Meta Stack Exchange
    - https://langdev.meta.stackexchange.com/questions/350/what-languages-have-been-created-by-pldi-users
  + Category:Programming Languages - APL Wiki
    - https://aplwiki.com/wiki/Category:Programming_languages
** ONLINE INTERPRETERS
   Some online interpreters that are free to use and very handy for tasks like this.

   + TIO.run
     - https://tio.run/
   + Tutorialspoint Codingground
     - https://www.tutorialspoint.com/codingground.htm
   + repl.it
     - https://repl.it/
   + IDEOne
     - https://ideone.com/
** OTHER USEFUL LINKS
   + https://www.alpertron.com.ar/QUAD.HTM
* SHORT LIST
  These are languages that I've either attempted to use several times
  and failed, or that I know (due to the specification or rules of the
  language) that they will only be usable for an incredibly easy
  challenge.
*** Emotinomicon
    The interpreter's primary stack shuffle command is broken. I
    believe we can horribly inefficiently store arbitrary data in the
    code space, but that restricts us to 16-bit integers.
*** Underload
    A very minimalist language. We can very inefficiently add,
    multiply, and take exponents, and we have rudimentary cons cells.
    Negative numbers are not supported, and anything vaguely
    complicated is not happening. Integer only, and linear analog
    representations at that.
*** FRACTRAN
    Yeah.

*** Inform 7
*** ed
