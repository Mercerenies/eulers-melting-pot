
{ m performs the modulo operation }
[
  1 ø 1 ø / \ * -
] m:

{ p checks whether the top of the stack is prime (clobbers n and r) }
[
  n: 0~ r:
  2 n; > [ 0 r: ]?
  2 [
    $ n; \ >
  ] [
    $ n; \ m;! 0 = [ 0 r: ]?
    1 +
  ]#
  % r;
] p:

{ c performs the actual brute-force recursion, takes two args off the top of the stack (clobbers k, b, t; n, r) }
[
  b: k:
  0 t:
  k; 0 = [ 1 t: ]?
  k; $ b; > [ % b; ]?
  [
    $ 0 >
  ] [
    $ p;! [ k; t; @ $ $ k; \ - \ c;! @ + t: \ k: ]?
    1 -
  ]#
  % t;
] c:

{ a gets the resulting value for a specific value off the stack (indirectly clobbers k, b, t, n, r) }
[
  $ $ c;! \ p;! [ 1 - ]?
] a:

0 [ $ a;! 5001 \ > ] [ 1 + ]# .